version "4.0"

class LadderLauncherHandler : EventHandler
{
	override void CheckReplacement(ReplaceEvent e)
	{
		if (!e.Replacement)
		{
			return;
		}

		switch (e.Replacement.GetClassName())
		{
			case 'CellPackReplacer':
			case 'RocketBoxRandom':
				if (random[ladderrand]() <= 8)
				{
					e.Replacement = "LadderLauncher";
				}
				break;
		}
	}
}

class LadderLauncher : HDWeapon
{
	enum LadderWeaponFlags
	{
		LWFLAG_LOADED = 1,
		LWFLAG_JUSTUNLOAD
	}

	override bool AddSpareWeapon(actor newowner) { return AddSpareWeaponRegular(newowner); }
	override HDWeapon GetSpareWeapon(actor newowner, bool reverse, bool doselect) {return GetSpareWeaponRegular(newowner, reverse, doselect); }
	override double GunMass() { return WeaponStatus[0] & LWFLAG_LOADED ? 6 : 4; }
	override double WeaponBulk() { return 90 + (WeaponStatus[0] & LWFLAG_LOADED ? ENC_LADDER / 3 : 0); }
	override string, double GetPickupSprite() { return "LLCHZ0", 1.0; }
	override void InitializeWepStats(bool idfa)
	{
		WeaponStatus[0] |= LWFLAG_LOADED;
	}
	override void LoadoutConfigure(string input)
	{
		InitializeWepStats(false);
	}

	override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl)
	{
		if (sb.hudlevel == 1)
		{
			sb.DrawImage("LADDD0", (-52, -4), sb.DI_SCREEN_CENTER_BOTTOM, scale: (0.6, 0.6));
			sb.DrawNum(hpl.CountInv("PortableLadder"), -45, -8, sb.DI_SCREEN_CENTER_BOTTOM);
		}

		if (hdw.WeaponStatus[0] & LWFLAG_LOADED)
		{
			sb.DrawRect(-21, -13, 5, 3);
		}
	}
	override string GetHelpText()
	{
		return WEPHELP_FIRESHOOT
		..WEPHELP_RELOADRELOAD
		..WEPHELP_UNLOADUNLOAD;
	}
	override void DrawSightPicture(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl, bool sightbob, vector2 bob, double fov, bool scopeview, actor hpc, string whichdot)
	{
		sb.DrawGrenadeLadder(0, bob);
	}

	override void DropOneAmmo(int amt)
	{
		if (owner)
		{
			owner.A_DropInventory("PortableLadder", 1);
		}
	}

	action void A_FireLadder()
	{
		A_StartSound("weapons/grenadeshot", CHAN_WEAPON, CHANF_OVERLAP);
		let ggg = spawn("LadderProjectile", pos + (0, 0, HDWeapon.GetShootOffset(self, invoker.BarrelLength, invoker.BarrelLength - HDCONST_SHOULDERTORADIUS) - 2), ALLOW_REPLACE);
		ggg.angle=angle;
		ggg.pitch=pitch - 2;
		ggg.target=self;
		ggg.master=self;
		ggg.translation = invoker.owner.translation;
	}

	Default
	{
		-HDWEAPON.FITSINBACKPACK
		Weapon.SelectionOrder 300;
		Weapon.SlotNumber 9;
		Weapon.SlotPriority 0;
		Scale 0.6;
		Inventory.PickupMessage "You got the ladder launcher!";
		HDWeapon.BarrelSize 24, 3.1,  3;
		Tag "Ladder launcher";
		HDWeapon.Refid "llc";
	}

	States
	{
		Spawn:
			LLCH Z -1;
			Stop;
		Select0:
			LLCH A 0;
			Goto Select0Small;
		Deselect0:
			LLCH A 0;
			Goto Deselect0Small;
		Ready:
			LLCH A 1 A_WeaponReady(WRF_ALLOWRELOAD | WRF_ALLOWUSER3 | WRF_ALLOWUSER4);
			Goto ReadyEnd;
		Fire:
			LLCH B 0 A_JumpIf(invoker.WeaponStatus[0] & LWFLAG_LOADED, "ReallyShoot");
			Goto Nope;
		ReallyShoot:
			LLCH A 1
			{
				A_ZoomRecoil(0.9);
				A_FireLadder();
				invoker.WeaponStatus[0] &= ~LWFLAG_LOADED;
			}
			LLCH A 1 offset(0, 37);
			LLCH B 0 A_MuzzleClimb(-frandom(2.0, 2.7), -frandom(3.4, 5.2));
			Goto Nope;
		LoadCommon:
			LLCH B 1 offset(2, 36) A_StartSound("weapons/rockopen", 8);
			LLCH C 1 offset(4, 42) A_MuzzleClimb(-frandom(1.2, 2.4),  frandom(1.2, 2.4));
			LLCH C 1 offset(10, 50);
			LLCH C 2 offset(12, 60) A_MuzzleClimb(-frandom(1.2, 2.4), frandom(1.2,  2.4));
			LLCH C 3 offset(13, 72) A_StartSound("weapons/rockopen2", 8, CHANF_OVERLAP);
			LLCH D 3 offset(14, 74);
			LLCH D 3 offset(11, 76) A_StartSound("weapons/pocket",  9);
			LLCH D 7 offset(10, 72);
			LLCH D 0
			{
				if (health < 40)
				{
					A_SetTics(7);
				}
				else if(health < 60)
				{
					A_SetTics(3);
				}
			}
			LLCH D 4 offset(12, 74) A_StartSound("weapons/rockreload", 8);
			LLCH D 2 offset(10, 72)
			{
				if (invoker.WeaponStatus[0] & LWFLAG_JUSTUNLOAD)
				{
					if(!(invoker.WeaponStatus[0] & LWFLAG_LOADED))
					{
						SetWeaponState("ReadyEnd");
					}
					else
					{
						invoker.WeaponStatus[0] &= ~LWFLAG_LOADED;
						if((!PressingUnload() && !PressingReload()) || A_JumpIfInventory("PortableLadder", 0, "null"))
						{
							A_SpawnItemEx("PortableLadder", 10, 0, height - 16, vel.x, vel.y, vel.z + 2, 0, SXF_ABSOLUTEMOMENTUM | SXF_NOCHECKPOSITION);
						}
						else
						{
							A_GiveInventory("PortableLadder", 1);
							A_StartSound("weapons/pocket",9);
							A_SetTics(4);
						}
					}
				}
				else
				{
					if (invoker.WeaponStatus[0] & LWFLAG_LOADED || !CheckInventory("PortableLadder", 1))
					{
						SetWeaponState("ReloadEnd");
					}
					else
					{
						A_TakeInventory("PortableLadder", 1, TIF_NOTAKEINFINITE);
						invoker.WeaponStatus[0] |= LWFLAG_LOADED;
						A_SetTics(5);
					}
				}
			}
		ReloadEnd:
			LLCH D 1 offset(12, 80);
			LLCH D 1 offset(11, 88);
			LLCH D 1 offset(10, 90) A_StartSound("weapons/rockopen2",  8);
			LLCH D 1 offset(10, 94);
			TNT1 A 4;
			LLCH D 0 A_StartSound("weapons/rockopen", 8,  CHANF_OVERLAP);
			LLCH C 1 offset(8, 78);
			LLCH C 1 offset(8, 66);
			LLCH C 1 offset(8, 52);
			LLCH B 1 offset(4, 40);
			LLCH B 1 offset(2, 34);
			Goto Ready;
		Reload:
			LLCH B 0 A_JumpIf(invoker.WeaponStatus[0] & LWFLAG_LOADED || !CheckInventory("PortableLadder", 1), "Nope");
			LLCH B 0
			{
				invoker.WeaponStatus[0] &= ~LWFLAG_JUSTUNLOAD;
			}
			Goto LoadCommon;
		Unload:
			LLCH B 0
			{
				if (!(invoker.WeaponStatus[0] & LWFLAG_LOADED))
				{
					setweaponstate("Nope");
				}
				else
				{
					invoker.WeaponStatus[0] |= LWFLAG_JUSTUNLOAD;
				}
			}
			Goto LoadCommon;
		}
}

class LadderProjectile : SlowProjectile
{
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		A_ChangeVelocity(speed * cos(pitch), 0, speed * sin(-pitch), CVF_RELATIVE);
	}

	Default
	{
		-NOEXTREMEDEATH
		-NOTELEPORT
		+BLOODLESSIMPACT
		Height 2;
		Radius 2;
		Scale 0.7;
		Speed 60;
		Mass 600;
		Accuracy 0;
		WoundHealth 0;
		Obituary "%o took %k's ladder to Heaven.";
		Stamina 5;
	}

	private Actor a;
	private bool Success;

	States
	{
		Spawn:
			LADD D -1;
			Stop;
		Death:
			TNT1 A 1
			{
				[success, a] = A_SpawnItemEx("HDLadderTopLedge", -16, 0, 0, angle: 180, flags: SXF_NOCHECKPOSITION | SXF_ORIGINATOR | SXF_SETMASTER);
			}
			TNT1 A 0
			{
				if (!a)
				{
					A_SpawnItemEx("PortableLadder", -10, 0, height - 16, 0, frandom(-1.0, 1.0), 2 + frandom(1.0, 2.0), 0, SXF_ABSOLUTEMOMENTUM | SXF_NOCHECKPOSITION);
				}
			}
			Goto Super::Death;
	}
}

// [Ace] As much as I hate copy-pasting code without adapting it, I changed exactly ONE (1) line. Not worth fixing the format to be consistent.
class HDLadderTopLedge : HDLadderTop
{
	override void postbeginplay(){
		HDActor.postbeginplay();
		A_SpawnParticle("darkred",0,10);
		pitch=18;
		bmissile=false;master=target;
		setz(floorz);
		fcheckposition tm;
		vector2 mvlast=pos.xy;
		vector2 mv=angletovector(angle,2);
		for(int i=0;i<20;i++){

			if(
				!checkmove(mvlast,PCM_NOACTORS,tm)
				&&!!master //don't break if placed by mapper
			)break;

			A_UnsetSolid();
			mvlast+=mv;

			//found a place for the ladder to hang down
			double htdiff=clamp(floorz-tm.floorz,0,LADDER_MAX);
			if(
				htdiff
			){

				//spawn the ladder end
				target=spawn("hdladderbottom",tm.pos,ALLOW_REPLACE);
				target.target=self;
				target.master=master;
				target.angle=angle;
				target.pitch=-27;

				vector2 mv2=mv*0.02;
				vector3 newpos=tm.pos;

				//spawn the ladder sections
				double sectionlength=min(htdiff,LADDER_MAX)/LADDER_SECTIONS;
				for(int i=1;i<=LADDER_SECTIONS;i++){
					newpos.xy+=mv2;
					let sss=hdladdersection(spawn("hdladdersection",newpos,ALLOW_REPLACE));
					sss.master=self;sss.target=target;sss.angle=angle+frandom(-1.,1.);
					sss.secnum=i;
					target.setorigin(newpos+(0,0,-sectionlength*i),true);
					if(master){
						sss.translation=master.translation;
						target.translation=master.translation;
					}
				}

				//reposition the thing
				setorigin((tm.pos.xy-mv*radius,floorz),true);

				//only complete if start or within throwable range, else abort
				if(!master)return;
				if(pos.z-master.pos.z<20){
					A_StartSound("misc/ladder");
					master.A_Log(string.format("You hang up a ladder.%s",master.getcvar("hd_helptext")?" Use the ladder to climb.":""),true);
					master.A_TakeInventory("PortableLadder",1);
					return;
				}
			}
		}

		//if there's no lower floor to drop the ladder, abort.
		if(master){
			master.A_Log("Can't hang a ladder here.",true);
		}else{
			actor hdl=spawn("PortableLadder",pos,ALLOW_REPLACE);
			hdl.A_StartSound("misc/ladder");
		}
		destroy();
	}
}